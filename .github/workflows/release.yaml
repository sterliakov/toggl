name: Release

permissions:
  contents: read

on:
  push:
    tags: [v*]

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - uses: actions/setup-python@v6

      - name: check tag vs cargo version
        run: |
          pip install yq
          tag_version=${GITHUB_REF#refs/tags/v}
          cargo_version=$(tomlq -r '.package.version' Cargo.toml)
          if [[ "$tag_version" != "$cargo_version" ]]; then
            printf '::error::Version mismatch: tag for %s, cargo %s' "$tag_version" "$cargo_version"
            exit 1
          fi
      - uses: taiki-e/create-gh-release-action@v1      # zizmor: ignore[ref-confusion]
        id: create-release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: master
          draft: true
          changelog: CHANGELOG.md
    outputs:
      version: ${{ steps.create-release.outputs.version }}

  upload-assets:
    needs: [create-release]
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            node_pair: linux-x64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            node_pair: linux-arm64

          - target: x86_64-apple-darwin
            os: macos-latest
            node_pair: darwin-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            node_pair: darwin-arm64

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            node_pair: windows-x64
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            node_pair: windows-arm64
    permissions:
      contents: write
      id-token: write
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - uses: actions/setup-node@v6
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org
          package-manager-cache: false
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          cache: false

      # Some windows magic
      # https://github.com/nymtech/nym-vpn-client/pull/54/files#diff-7a42dc8739297053550b8882b7bf3fcc770725f51365f7b273ed5a7d9d91c329R151
      # https://github.com/sfackler/rust-openssl/issues/2149
      - name: Enable git long-paths
        if: contains(matrix.os, 'windows')
        run: git config --system core.longpaths true
      - name: Setup Perl
        uses: shogo82148/actions-setup-perl@v1
        if: contains(matrix.os, 'windows')
        with:
          perl-version: '5.38'
          distribution: strawberry
      - id: windows-configure-perl
        if: contains(matrix.os, 'windows')
        run: |
          # shellcheck disable=SC1073,SC1009,SC1072
          echo "PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          echo "OPENSSL_SRC_PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - uses: taiki-e/upload-rust-binary-action@v1      # zizmor: ignore[ref-confusion]
        with:
          # (required) Comma-separated list of binary names (non-extension portion of filename) to build and upload.
          # Note that glob pattern is not supported yet.
          bin: toggl-tracker
          checksum: sha256
          include: LICENSE,README.md
          target: ${{ matrix.target }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NPM
        shell: bash
        run: |
          npm install -g npm@latest
          cd npm/sub

          target="${{ matrix.node_pair }}"
          export node_os=${target%-*}
          export node_arch=${target#*-}
          export node_pkg="@sterliakov/toggl-tracker-${{ matrix.node_pair }}"

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            bin="target/${{ matrix.target }}/release/toggl-tracker.exe"
          else
            bin="target/${{ matrix.target }}/release/toggl-tracker"
          fi
          mkdir bin
          cp "../../$bin" ./bin/

          cp ../../LICENSE .
          envsubst <package.json.tmpl >package.json
          rm package.json.tmpl

          npm publish --access public
        env:
          VERSION: ${{ needs.create-release.outputs.version }}

  npm_base_publish:
    name: Publish the base NPM package
    needs: [create-release, upload-assets]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - uses: actions/setup-node@v6
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org
          package-manager-cache: false

      - name: Publish the package
        shell: bash
        run: |
          npm install -g npm@latest
          cd npm/main
          cp ../../README.md ./
          cp ../../LICENSE ./
          envsubst <package.json.tmpl >package.json
          rm package.json.tmpl

          npm publish --access public
        env:
          VERSION: ${{ needs.create-release.outputs.version }}

  crates_io_publish:
    name: Publish (crates.io)
    needs: [upload-assets]
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          cache: false
      - uses: rust-lang/crates-io-auth-action@v1
        id: auth
      - name: Publish
        run: cargo publish --no-verify
        env:
          CARGO_REGISTRY_TOKEN: ${{ steps.auth.outputs.token }}

  finish_release:
    name: Promote draft release to ready
    needs: [npm_base_publish, crates_io_publish]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - run: gh release edit "${GITHUB_REF#refs/tags/}" --draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
